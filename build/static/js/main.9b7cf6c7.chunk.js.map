{"version":3,"sources":["store/reducer.ts","store/constants.ts","store/actions.ts","utils/isPositiveNum.ts","components/Topbar.tsx","components/AddExpenses.tsx","components/ExpensesList.tsx","components/RefreshButton.tsx","components/App.tsx","components/purchasesForExpensePart/AddPurchases.tsx","components/purchasesForExpensePart/PurchasesList.tsx","components/purchasesForExpensePart/index.tsx","Main.js","index.js"],"names":["thisExpense","idCounter","initialState","generalSum","currentSum","days","isCurrentSumPositive","expenses","controlMoneyApp","state","action","type","payload","value","id","name","everyDayExpenseValue","currentDayExpenseValue","isExpensePositive","purchases","map","expense","expenseId","decrementAmountOfDays","isPositiveNumber","num","isNaN","Number","mapDispatchToProps","addInitialValues","TopbarContainer","connect","sumInput","daysInput","className","ref","input","onClick","undefined","addExpenses","AddExpensesContainer","expenseName","expenseValue","console","dir","trim","checked","ExpensesListContainer","expensesList","length","idx","key","exact","to","RefreshButton","localStorage","setItem","JSON","stringify","document","location","reload","AppContainer","checkTime","Date","getHours","useEffect","intervalId","setInterval","clearInterval","mapDispatch","addPurchase","AddPurchasesContainer","expenseItem","purchaseName","purchaseValue","PurchasesListContainer","purchase","PurchasesContainer","ownProps","find","item","match","params","Main","store","path","component","App","Purchases","persistedState","getItem","parse","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9b7cf6c7.chunk.js","sourcesContent":["import {\r\n  ADD_EXPENSES,\r\n  ADD_PURCHASE,\r\n  ADD_INITIAL_VALUES,\r\n  DECREMENT_AMOUNT_OF_DAYS,\r\n} from './constants';\r\n\r\nimport {\r\n  appActionTypes,\r\n  AppState,\r\n  Expense,\r\n} from './types';\r\n\r\nlet idCounter: number = 0;\r\nlet thisExpense: Expense;\r\n\r\nexport const initialState: AppState = {\r\n  generalSum: 0,\r\n  currentSum: 0,\r\n  days: 0,\r\n  isCurrentSumPositive: true,\r\n  expenses: [],\r\n};\r\n\r\nconst controlMoneyApp = (state: AppState = initialState, action: appActionTypes) => {\r\n  switch (action.type) {\r\n    case ADD_INITIAL_VALUES:\r\n      return {\r\n        generalSum: action.payload.value,\r\n        currentSum: action.payload.value,\r\n        days: action.payload.days,\r\n        isCurrentSumPositive: true,\r\n        expenses: [],\r\n      };\r\n    case ADD_EXPENSES:\r\n      if (state.currentSum - action.payload.value < 0) {\r\n        return { ...state, isCurrentSumPositive: false };\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        isCurrentSumPositive: true,\r\n        currentSum: state.currentSum - action.payload.value,\r\n        expenses: [\r\n          ...state.expenses,\r\n          {\r\n            id: ++idCounter,\r\n            value: action.payload.value,\r\n            name: action.payload.name,\r\n            everyDayExpenseValue: action.payload.everyDayExpenseValue,\r\n            currentDayExpenseValue: action.payload.everyDayExpenseValue,\r\n            isExpensePositive: true,\r\n            purchases: [],\r\n          },\r\n        ],\r\n      };\r\n    case ADD_PURCHASE:\r\n      return {\r\n        ...state,\r\n        expenses: state.expenses.map((expense) => {\r\n          if (action.payload.expenseId === expense.id) {\r\n            if (expense.value - action.payload.value < 0) {\r\n              thisExpense = { ...expense, isExpensePositive: false };\r\n              return thisExpense;\r\n            }\r\n\r\n            thisExpense = {\r\n              ...expense,\r\n              value: expense.value - action.payload.value,\r\n              isExpensePositive: true,\r\n              currentDayExpenseValue: expense.currentDayExpenseValue ? expense.currentDayExpenseValue - action.payload.value : null,\r\n              purchases: [\r\n                ...expense.purchases,\r\n                {\r\n                  value: action.payload.value,\r\n                  name: action.payload.name,\r\n                },\r\n              ],\r\n            };\r\n\r\n            return thisExpense;\r\n          }\r\n          return expense;\r\n        }),\r\n        generalSum: thisExpense.isExpensePositive\r\n          ? (state.generalSum - action.payload.value) : state.generalSum,\r\n      };\r\n    case DECREMENT_AMOUNT_OF_DAYS:\r\n      return {\r\n        ...state,\r\n        days: state.days - 1,\r\n        expenses: state.expenses.map((expense) => {\r\n          if (expense.everyDayExpenseValue && expense.currentDayExpenseValue) {\r\n            return {\r\n              ...expense,\r\n              currentDayExpenseValue: expense.currentDayExpenseValue + expense.everyDayExpenseValue,\r\n            };\r\n          }\r\n          return expense;\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default controlMoneyApp;\r\n","// ACTION TYPES\r\n\r\nexport const ADD_EXPENSES = 'ADD_EXPENSES';\r\nexport const ADD_PURCHASE = 'ADD_PURCHASE';\r\nexport const ADD_INITIAL_VALUES = 'ADD_INITIAL_VALUES';\r\nexport const DECREMENT_AMOUNT_OF_DAYS = 'DECREMENT_AMOUNT_OF_DAYS';\r\n","import { ADD_EXPENSES, ADD_PURCHASE, ADD_INITIAL_VALUES, DECREMENT_AMOUNT_OF_DAYS } from './constants';\r\nimport {\r\n  addExpenseAction,\r\n  addPurchaseAction,\r\n  addInitialValuesAction,\r\n  decrementAmountOfDaysAction,\r\n  ExpensePayload,\r\n  PurchasePayload,\r\n  initialValuesPayload,\r\n} from './types';\r\n\r\n// ACTION CREATORS\r\n\r\nexport function addExpenses(payload: ExpensePayload): addExpenseAction {\r\n  return { type: ADD_EXPENSES, payload};\r\n}\r\n\r\nexport function addPurchase(payload: PurchasePayload): addPurchaseAction {\r\n  return {\r\n    type: ADD_PURCHASE,\r\n    payload,\r\n  };\r\n}\r\n\r\nexport function addInitialValues(payload: initialValuesPayload): addInitialValuesAction {\r\n  return { type: ADD_INITIAL_VALUES, payload };\r\n}\r\n\r\nexport function decrementAmountOfDays(): decrementAmountOfDaysAction {\r\n  return { type: DECREMENT_AMOUNT_OF_DAYS };\r\n}\r\n\r\n\r\n","export const isPositiveNumber = (num: number | string): boolean => ((!isNaN(Number(num)) && Number(num) > 0) ? true : false);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { addInitialValues } from '../store/actions';\nimport { isPositiveNumber } from '../utils/isPositiveNum';\n\nimport {\n  addInitialValuesAction,\n  initialValuesPayload,\n  AppState\n} from '../store/types';\n\ninterface TopbarProps {\n    generalSum: number;\n    currentSum: number;\n    days: number;\n    addInitialValues: (payload: initialValuesPayload) => addInitialValuesAction;\n}\n\nexport const Topbar: React.FC<TopbarProps> = ({ generalSum, currentSum, days, addInitialValues }) => {\n  let sumInput: HTMLInputElement | null = null;\n  let daysInput: HTMLInputElement | null = null;\n\n  const getGeneralSum = () => {\n    addInitialValues({value: Number((sumInput as HTMLInputElement).value), days: Number((daysInput as HTMLInputElement).value)});\n  };\n\n  if (isPositiveNumber(generalSum) && isPositiveNumber(days)) {\n    return (\n      <div className=\"topbar\">\n        <h2 className=\"topbar__title\">Добро пожаловать в Control Money App.</h2>\n        <div className=\"topbar__counters\">\n          <p className=\"topbar__counter\">\n            Ваша общая сумма в наличии\n            <p>(в рублях):</p>\n            <span className=\"num-count\">{generalSum}</span>\n          </p>\n          <p className=\"topbar__counter\">\n            Ваша сумма в остатке после вычета категорий\n            <p>(в рублях):</p>\n            <span className=\"num-count\">{currentSum}</span>\n          </p>\n          <p className=\"topbar__counter\">\n            Осталось <span className=\"num-count\">{days}</span> дней\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"topbar\">\n      <h2 className=\"topbar__title\">Добро пожаловать в Control Money App.</h2>\n      <label>\n        Введите сумму, которой вы распологаете.\n        <br />\n        <input ref={(input) => { sumInput = input; }} type=\"text\" />\n        <br />\n      </label>\n      <label>\n        Введите на сколько дней у вас данная сумма.\n        <br />\n        <input ref={(input) => { daysInput = input; }} type=\"text\" />\n        <br />\n      </label>\n      <button type=\"button\" onClick={getGeneralSum}>Начать учет</button>\n      <h3 className=\"topbar__mistake-text\">\n        {(generalSum === undefined || isPositiveNumber(generalSum))\n          ? '' : 'Пожалуйста, введите корректное число.'}\n      </h3>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  generalSum: state.generalSum,\n  currentSum: state.currentSum,\n  days: state.days,\n});\n\nconst mapDispatchToProps = {\n  addInitialValues\n};\n\nconst TopbarContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Topbar);\n\nexport default TopbarContainer;\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { addExpenses } from '../store/actions';\r\nimport { isPositiveNumber } from '../utils/isPositiveNum';\r\n\r\nimport {\r\n    AppState,\r\n    addExpenseAction,\r\n    ExpensePayload\r\n} from '../store/types';\r\n\r\ninterface AddExpensesProps {\r\n  generalSum: number,\r\n  isCurrentSumPositive: boolean,\r\n  days: number,\r\n  addExpenses: (payload: ExpensePayload) => addExpenseAction,\r\n}\r\n\r\nconst AddExpenses: React.FC<AddExpensesProps> = ({\r\n  generalSum,\r\n  isCurrentSumPositive,\r\n  days,\r\n  addExpenses,\r\n}) => {\r\n  let expenseName: HTMLInputElement | null = null;\r\n  let expenseValue: HTMLInputElement | null = null;\r\n  let everyDayExpenseValue: HTMLInputElement | null = null;\r\n\r\n  const addExpenseToList = () => {\r\n    console.dir((everyDayExpenseValue as HTMLInputElement))\r\n    if ((expenseName as HTMLInputElement).value.trim() === '' || (expenseValue as HTMLInputElement).value.trim() === ''\r\n        || !isPositiveNumber((expenseValue as HTMLInputElement).value)) { return; }\r\n    addExpenses({\r\n      value: Number((expenseValue as HTMLInputElement).value),\r\n      name: (expenseName as HTMLInputElement).value,\r\n      everyDayExpenseValue: ((everyDayExpenseValue as HTMLInputElement).checked ? Number((expenseValue as HTMLInputElement).value)/days : null),\r\n    });\r\n\r\n      (expenseName as HTMLInputElement).value = '';\r\n      (expenseValue as HTMLInputElement).value = '';\r\n  };\r\n\r\n  if (isPositiveNumber(generalSum) && isPositiveNumber(days)) {\r\n    return (\r\n      <div className=\"addExpense\">\r\n        <p className=\"addExpense__info\">\r\n          Введите вид товара, на который вы собираетесь тратить деньги и сколько\r\n          вы планируете на него потратить.\r\n        </p>\r\n        <div className=\"addExpense__fields-wrapper\">\r\n          <label className=\"addExpense__field\">\r\n            <span className=\"addExpense__field__title\">Вид товара:</span>\r\n            <input ref={(input) => { expenseName = input; }} type=\"text\" />\r\n          </label>\r\n          <label className=\"addExpense__field\">\r\n            <span className=\"addExpense__field__title\">Планируемые расходы:</span>\r\n            <input ref={(input) => { expenseValue = input; }} type=\"text\" />\r\n          </label>\r\n          <label className=\"addExpense__field\">\r\n            <span className=\"addExpense__field__title\">Каждодневная трата:</span>\r\n            <input ref={(input) => { everyDayExpenseValue = input; }} type=\"checkbox\" />\r\n          </label>\r\n        </div>\r\n        <button className=\"addExpense__btn\" type=\"button\" onClick={addExpenseToList}>Добавить расходы</button>\r\n        <p>\r\n          {isCurrentSumPositive ? ''\r\n            : 'Не хватает средств, чтобы добавить категорию'}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  generalSum: state.generalSum,\r\n  isCurrentSumPositive: state.isCurrentSumPositive,\r\n  days: state.days\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    addExpenses\r\n};\r\n\r\nconst AddExpensesContainer = connect(\r\n  mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddExpenses);\r\n\r\nexport default AddExpensesContainer;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport {\r\n  AppState,\r\n  Expense\r\n} from '../store/types';\r\n\r\ninterface ExpensesListProps {\r\n  expensesList: Expense[]\r\n}\r\n\r\nexport const ExpensesList: React.FC<ExpensesListProps> = ({ expensesList }) => {\r\n  if (expensesList !== undefined && expensesList.length !== 0) {\r\n    return (\r\n      <ul className=\"expensesList\">\r\n        {expensesList.map((expense, idx) => (\r\n          <li key={idx}>\r\n            <NavLink\r\n              exact\r\n              to={`/${expense.id}`}\r\n            >\r\n              На категорию &quot;\r\n              {expense.name}\r\n              &quot; осталось\r\n              {' '}\r\n              {expense.value}\r\n              {' '}\r\n              рублей.\r\n            </NavLink>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  expensesList: state.expenses,\r\n});\r\n\r\nconst ExpensesListContainer = connect(\r\n  mapStateToProps,\r\n)(ExpensesList);\r\n\r\nexport default ExpensesListContainer;\r\n","import React from 'react';\r\n\r\nimport { initialState } from '../store/reducer';\r\n\r\ninterface RefreshButtonProps {\r\n}\r\n\r\nconst RefreshButton: React.FC<RefreshButtonProps> = () => {\r\n\r\n  return (\r\n    <div className=\"container_rightSide\">\r\n      <button className=\"refreshBtn\"\r\n              onClick={() => {\r\n                localStorage.setItem('controlMoneyStore', JSON.stringify(initialState));\r\n                document.location.reload();\r\n              }}\r\n      >\r\n        Начать новый лист\r\n      </button>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default RefreshButton;\r\n","import React, {useEffect} from 'react';\nimport {connect} from \"react-redux\";\n\nimport Topbar from './Topbar';\nimport AddExpenses from './AddExpenses';\nimport ExpensesList from './ExpensesList';\nimport RefreshButton from './RefreshButton';\n\nimport { decrementAmountOfDays } from '../store/actions';\n\nimport {\n  decrementAmountOfDaysAction,\n} from '../store/types';\n\ninterface AppProps {\n  decrementAmountOfDays: () => decrementAmountOfDaysAction,\n}\n\nfunction App({ decrementAmountOfDays }: AppProps): JSX.Element {\n\n  const checkTime = () => {\n    if (new Date().getHours()+\"\" === '05') {\n      decrementAmountOfDays();\n    }\n  }\n\n  useEffect(() => {\n    const intervalId = setInterval(checkTime, 3600000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return (\n    <>\n    <RefreshButton/>\n    <div className=\"App wrapper\">\n      <Topbar/>\n      <AddExpenses/>\n      <ExpensesList/>\n    </div>\n    </>\n  );\n}\n\nconst mapDispatchToProps = {\n  decrementAmountOfDays,\n};\n\nconst AppContainer = connect(\n  null,\n  mapDispatchToProps,\n)(App);\n\nexport default AppContainer;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { addPurchase } from '../../store/actions';\nimport { isPositiveNumber } from '../../utils/isPositiveNum';\n\nimport {\n    addPurchaseAction,\n    PurchasePayload,\n    Expense\n} from '../../store/types';\n\ninterface AddPurchaseProps {\n    expenseItem: Expense,\n    addPurchase: (payload: PurchasePayload) => addPurchaseAction,\n}\n\nconst AddPurchases: React.FC<AddPurchaseProps> = ({ expenseItem, addPurchase }) => {\n  let purchaseName: HTMLInputElement | null = null;\n  let purchaseValue: HTMLInputElement | null = null;\n\n  const addPurchaseToList = (): void => {\n    if ((purchaseName as HTMLInputElement).value.trim() === '' || (purchaseValue as HTMLInputElement).value.trim() === ''\n         || !isPositiveNumber((purchaseValue as HTMLInputElement).value)) { return; }\n\n    addPurchase({\n        expenseId: expenseItem.id,\n        value: Number((purchaseValue as HTMLInputElement).value),\n        name: (purchaseName as HTMLInputElement).value,\n     });\n\n      (purchaseName as HTMLInputElement).value = '';\n      (purchaseValue as HTMLInputElement).value = '';\n  };\n\n  return (\n    <div className=\"addPurchase\">\n      <h3>\n        Введите ваши покупки в категории\n        &quot;\n        {expenseItem.name}\n        &quot;.\n      </h3>\n      <label>\n        Покупка:\n        <br />\n        <input ref={(input) => { purchaseName = input; }} type=\"text\" />\n        <br />\n      </label>\n      <label>\n        Сколько потратили:\n        <br />\n        <input ref={(input) => { purchaseValue = input; }} type=\"text\" />\n        <br />\n      </label>\n      <button type=\"button\" onClick={addPurchaseToList}>Добавить покупку</button>\n      <p>\n        { expenseItem.isExpensePositive ? ''\n          : 'Не хватает средств, чтобы добавить покупку'}\n      </p>\n    </div>\n  );\n};\n\nconst mapDispatch = {\n  addPurchase,\n};\n\nconst AddPurchasesContainer = connect(null, mapDispatch)(AddPurchases);\n\nexport default AddPurchasesContainer;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { Expense, AppState } from '../../store/types';\n\ntype PurchasesListProps = {\n    expenseItem: Expense,\n    days: number,\n};\n\nconst PurchasesList: React.FC<PurchasesListProps> = ({ expenseItem, days }) => (\n  <div className=\"purchasesList\">\n    {expenseItem.everyDayExpenseValue ?\n      <div>\n      <p className=\"purchasesList__info\">\n        На {days} дней осталось\n        {' '}\n        {expenseItem.value}\n        {' '}\n        рублей.\n      </p>\n      <p className=\"purchasesList__info\">\n        На сегодня выделено\n        {' '}\n        {expenseItem.currentDayExpenseValue}\n        {' '}\n        рублей.\n      </p>\n      </div>\n      :\n      <p className=\"purchasesList__info\">\n        На категорию &quot;\n        {expenseItem.name}\n        &quot; осталось\n        {' '}\n        {expenseItem.value}\n        {' '}\n        рублей.\n      </p>\n    }\n    <table className=\"purchasesList__table\">\n      <tr>\n        <th>Название продукта</th>\n        <th>Цена</th>\n      </tr>\n      {expenseItem.purchases.map((purchase) => (\n        <tr>\n          <td>{purchase.name}</td>\n          <td>{purchase.value}</td>\n        </tr>\n      ))}\n    </table>\n  </div>\n);\n\nconst mapState = (state: AppState) => ({\n  days: state.days,\n})\n\nconst PurchasesListContainer = connect(mapState)(PurchasesList)\n\nexport default PurchasesListContainer;\n","import React, {useEffect} from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport AddPurchases from './AddPurchases';\nimport PurchasesList from './PurchasesList';\n\nimport { decrementAmountOfDays } from '../../store/actions';\n\nimport {\n  AppState,\n  decrementAmountOfDaysAction,\n  Expense\n} from '../../store/types';\n\ntype PurchasesProps = {\n  expenseItem: Expense | null,\n  decrementAmountOfDays: () => decrementAmountOfDaysAction,\n};\n\nconst Purchases: React.FC<PurchasesProps> = ({ expenseItem, decrementAmountOfDays }) => {\n\n  const checkTime = () => {\n    if (new Date().getHours()+\"\" === '05') {\n      decrementAmountOfDays();\n    }\n  }\n\n  useEffect(() => {\n    const intervalId = setInterval(checkTime, 3600000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  if (expenseItem === null) {\n    return (\n      <div className=\"purchases wrapper\">\n        Это оповещательное сообщение. Хранилище с данными о покупках не имеет\n        информации, чтобы ее показать. Скорее всего, вы обновили страницу или\n        перешли на поддомен, введя его в поисковой строке.\n        Так как данное приложение не работает с базой данных, для проверки\n        логики приложения пожалуйста пользуйтесь кнопками &quot;вернуться на\n        предыдущую страницу&quot; в браузере.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"purchases wrapper\">\n      <AddPurchases expenseItem={expenseItem} />\n      <PurchasesList expenseItem={expenseItem} />\n    </div>\n  );\n};\n\ntype purchaseOwnProps = {\n    expenseId: string\n};\n\nconst mapStateToProps = (state: AppState, ownProps: RouteComponentProps<purchaseOwnProps>) => ({\n    expenseItem: state.expenses.find((item: Expense) => item.id === Number(ownProps.match.params.expenseId)) || null,\n  });\n\nconst mapDispatch = {\n  decrementAmountOfDays\n};\n\nconst PurchasesContainer = connect(\n  mapStateToProps,\n  mapDispatch,\n)(Purchases);\n\nexport default PurchasesContainer;\n","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport App from './components/App';\nimport Purchases from './components/purchasesForExpensePart';\n\nconst Main = ({ store }) => (\n  <Provider store={store}>\n    <Router>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/:expenseId\" component={Purchases} />\n    </Router>\n  </Provider>\n);\n\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\n\nimport reducer from './store/reducer';\nimport Main from './Main';\nimport './styles/main.sass';\n\nconst persistedState = localStorage.getItem('controlMoneyStore') ? JSON.parse(localStorage.getItem('controlMoneyStore')) : undefined;\n\nconst store = createStore(\n  reducer,\n  persistedState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nstore.subscribe(() => {\n  localStorage.setItem('controlMoneyStore', JSON.stringify(store.getState()));\n});\n\nReactDOM.render(\n  <Main store={store} />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}